version: '3'

services:
  #################################################项目管理开始##############################################
  ####  jenkins:9991    redmine:9992
  #jenkins 配置
  jenkins:
    image: 'jenkinsci/blueocean'
    container_name: jenkins
    restart: always
    environment:
      - TZ=Asia/Shanghai
    ports:
      - '9991:8080'
      - '50000:50000'
    volumes:
      - '../jenkins/data:/var/jenkins_home'
      - '../jenkins/docker.sock:/var/run/docker.sock'
    networks:
      - manager-net
      
  #redmine 配置    
  redmine:
    image: redmine:4.2.7-bullseye
    container_name: redmine
    restart: always
    ports:
      - 9992:3000
    hostname: redmine
    environment:
      - TZ=Asia/Shanghai
      - VIRTUAL_HOST=127.0.0.1
      - VIRTUAL_NETWORK=nginx-proxy
      - VIRTUAL_PORT=3000
      - LETSENCRYPT_HOST=127.0.0.1
      - LETSENCRYPT_EMAIL=365328730@qq.com
      - REDMINE_DB_MYSQL=mysql  # mysql中的amdin默认密码是sun123456
      - REDMINE_DB_USERNAME=root
      - REDMINE_DB_PASSWORD=idorp123456
      - REDMINE_DB_PORT=3306
      - REDMINE_DB_NAME=redmine
      - REDMINE_SECRET_KEY_BASE=sunzhicheng@P0SSW0RD
    volumes:
      - ../redmine/files:/usr/src/redmine/files
      - ../redmine/git-repo:/home/redmine/git-repo
      - ../redmine/configuration.yml:/usr/src/redmine/config/configuration.yml
    depends_on:
      - mysql
    networks:
      - tt-net

  #################################################项目管理结束##############################################
  # 配置数据库   skip-name-resolve  解决通过dns连接数据库慢的问题
  mysql:
    image: mysql:5.7
    restart: always
    container_name: "mysql_5_7"
    environment:
      - MYSQL_ROOT_PASSWORD=idorp123456
    ports:
      - 3306:3306
    volumes: 
      - ../mysql/data:/var/lib/mysql
      - ../mysql/conf/conf.d:/etc/mysql/conf.d
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --lower-case-table-names=1
      --skip-name-resolve  
    networks:
      - tt-net

  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres   #默认账户名为  postgres
    ports:
      - 5432:5432
    volumes:
      - ../postgres/data:/var/lib/postgresql/data
    networks:
      - tt-net

  # 配置phpmyadmin 
  phpmyadmin:
    image: library/phpmyadmin
    #restart: always
    container_name: "phpmyadmin"
    ports:
      - 8801:80
    links:
      - mysql:db
    networks:
      - tt-net
    environment:
      # 开启连接外部数据的IP选择框
      - PMA_ARBITRARY=1

  # 配置redis
  redis:
    image: redis:7
    container_name: "redis7"
    restart: always
    ports:
      - 6379:6379
    volumes: 
      - ../redis/data:/data
      - ../redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server --appendonly yes  --requirepass idorp123456
    environment:
      - TZ=Asia/Shanghai
    networks:
      - tt-net

  # 配置openresty   extra_hosts=给容器添加hosts
  # extra_hosts:
  #   - dev.idorp.com:127.0.0.1
  openresty:
    image: openresty/openresty:focal
    container_name: "openresty_focal"
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ../openresty/conf:/etc/nginx/conf.d
      - ../openresty/data:/data
      - ../openresty/logs:/usr/local/openresty/nginx/logs
    networks:
      - tt-net

  #nexus   
  nexus:
    restart: always
    image: sonatype/nexus3:3.41.1
    container_name: nexus
    ports:
      - "8081:8081"
    volumes:
      - ../nexus/data:/nexus-data

  # 配置EMQ
  emq:
    image: emqx/emqx:4.2.1
    container_name: "emq_4_2_1"
    #restart: always
    ports:
      - 8883:1883
      - 8883:8083
      - 18083:18083
    volumes: 
      - ../emq/log:/opt/emqx/log
    networks:
      - tt-net

      # 配置portainer 容器管理器
  dockerManager:
    image: portainer/portainer-ce:latest
    #restart: always
    container_name: "dockerManager"
    ports:
      - 8802:9000
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock
      - ../dockerManager/data:/data
    networks:
      - tt-net

  #FLINK配置
  jobmanager:
    image: flink:latest
    expose:
      - "6123"
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    networks:
      - tt-net

  taskmanager:
    image: flink:latest
    expose:
      - "6121"
      - "6122"
    depends_on:
      - jobmanager
    command: taskmanager
    links:
      - "jobmanager:jobmanager"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    networks:
      - tt-net

  

  gogs:
    #restart: always # 自动重启
    image: gogs/gogs:latest
    container_name: gogs
    ports:
      - "8822:22" # ssh 端口
      - "8830:3000" # Web 访问端口
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ../gogs/data:/home/git/gogs-repositories # 数据存储
    networks:
      - tt-net  

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    restart: unless-stopped
    networks:
      - mqtt-net 

  kafka1:
    image: wurstmeister/kafka
    ports:
      - 9092:9092
      - 8083:8083
    environment:
      DOCKER_API_VERSION: 1.22
      KAFKA_ADVERTISED_HOST_NAME: 192.168.0.22
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    # volumes:
      # - ../kafka/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    depends_on:
      - zookeeper
    networks:
      - mqtt-net 

  tb:
    # restart: always
    image: "thingsboard/tb-postgres"
    container_name: tb_iot
    ports:
      - "6090:9090"
      - "1883:1883"
      - "5683:5683/udp"
    environment:
      - TB_QUEUE_TYPE=in-memory
      - TZ=Asia/Shanghai
    volumes:
      - ../thingsboard/data:/data
      - ../thingsboard/logs:/var/log/thingsboard


  elasticsearch:
    image: elasticsearch:6.8.11
    container_name: elasticsearch
    environment:
      ES_JAVA_OPTS: -Djava.net.preferIPv4Stack=true -Xms1g -Xmx1g
      transport.host: 0.0.0.0
      discovery.type: single-node
      bootstrap.memory_lock: "true"
      discovery.zen.minimum_master_nodes: 1
      discovery.zen.ping.unicast.hosts: elasticsearch
    volumes:
      - ../elasticsearch/data:/usr/share/elasticsearch/data
    networks:
      - tt-net   

# volumes:
#   mytb-data:    #可在所有服务中调用
#     external: true   #如果设置为 true 则 docker-compose up 不会尝试创建它, 如果它不存在则引发错误
#   mytb-logs:
#     external: true
networks: 
  tt-net: 
    driver: bridge
  mqtt-net: 
    driver: bridge
  manager-net: 
    driver: bridge

        
        